public class testcode.oidc.otherexamples.SimpleCFG {


public int simpleCFGAnalyzed1();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method a:()Z
       4: ifeq          9
       7: iconst_1
       8: ireturn
       9: iconst_2
      10: ireturn

simpleCFGAnalyzed1()

BASIC BLOCK: 0
  -1: nop[0](1)
END
  EDGE(0) type START from block 0 to block 2 [bytecode -1 -> 0]

BASIC BLOCK: 1
END

BASIC BLOCK: 2
   0: aload_0[42](1)
END
  EDGE(1) type FALL_THROUGH from block 2 to block 3 [bytecode 0 => 1]

BASIC BLOCK: 3 [EXCEPTION THROWER]
  Exception thrower:    1: invokespecial[183](3) 2
END
  EDGE(2) type FALL_THROUGH from block 3 to block 4 [successful check]
  EDGE(3) type UNHANDLED_EXCEPTION from block 3 to block 1 [failed check for 1]

BASIC BLOCK: 4
   1: invokespecial[183](3) 2
   4: ifeq[153](3) -> 9
END
  EDGE(4) type IFCMP from block 4 to block 5 [bytecode 4 -> 9]
  EDGE(5) type FALL_THROUGH from block 4 to block 6 [bytecode 4 -> 7]

BASIC BLOCK: 5
   9: iconst_2[5](1)
  10: ireturn[172](1)
END
  EDGE(6) type RETURN from block 5 to block 1

BASIC BLOCK: 6
   7: iconst_1[4](1)
   8: ireturn[172](1)
END
  EDGE(7) type RETURN from block 6 to block 1



public int simpleCFGAnalyzed2();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method a:()Z
       4: ifne          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: invokespecial #3                  // Method b:()Z
      13: ifne          18
      16: iconst_2
      17: ireturn
      18: iconst_3
      19: ireturn
}



simpleCFGAnalyzed2()



BASIC BLOCK: 0
  -1: nop[0](1)
END
  EDGE(0) type START from block 0 to block 2 [bytecode -1 -> 0]

BASIC BLOCK: 1
END

BASIC BLOCK: 2
   0: aload_0[42](1)
END
  EDGE(1) type FALL_THROUGH from block 2 to block 3 [bytecode 0 => 1]

BASIC BLOCK: 3 [EXCEPTION THROWER]
  Exception thrower:    1: invokespecial[183](3) 2
END
  EDGE(2) type FALL_THROUGH from block 3 to block 4 [successful check]
  EDGE(3) type UNHANDLED_EXCEPTION from block 3 to block 1 [failed check for 1]

BASIC BLOCK: 4
   1: invokespecial[183](3) 2
   4: ifne[154](3) -> 9
END
  EDGE(4) type IFCMP from block 4 to block 5 [bytecode 4 -> 9]
  EDGE(5) type FALL_THROUGH from block 4 to block 6 [bytecode 4 -> 7]

BASIC BLOCK: 5
   9: aload_0[42](1)
END
  EDGE(6) type FALL_THROUGH from block 5 to block 7 [bytecode 9 => 10]

BASIC BLOCK: 6
   7: iconst_1[4](1)
   8: ireturn[172](1)
END
  EDGE(7) type RETURN from block 6 to block 1

BASIC BLOCK: 7 [EXCEPTION THROWER]
  Exception thrower:   10: invokespecial[183](3) 3
END
  EDGE(8) type FALL_THROUGH from block 7 to block 8 [successful check]
  EDGE(9) type UNHANDLED_EXCEPTION from block 7 to block 1 [failed check for 10]

BASIC BLOCK: 8
  10: invokespecial[183](3) 3
  13: ifne[154](3) -> 18
END
  EDGE(10) type IFCMP from block 8 to block 9 [bytecode 13 -> 18]
  EDGE(11) type FALL_THROUGH from block 8 to block 10 [bytecode 13 -> 16]

BASIC BLOCK: 9
  18: iconst_3[6](1)
  19: ireturn[172](1)
END
  EDGE(12) type RETURN from block 9 to block 1

BASIC BLOCK: 10
  16: iconst_2[5](1)
  17: ireturn[172](1)
END
  EDGE(13) type RETURN from block 10 to block 1


verifyTokens()

BASIC BLOCK: 0
  -1: nop[0](1)
END
  EDGE(0) type START from block 0 to block 2 [bytecode -1 -> 0]

BASIC BLOCK: 1
END

BASIC BLOCK: 2
   0: aload_1[43](1)
END
  EDGE(1) type FALL_THROUGH from block 2 to block 3 [bytecode 0 => 1]

BASIC BLOCK: 3 [EXCEPTION THROWER]
  Exception thrower:    1: invokevirtual[182](3) 4
END
  EDGE(2) type HANDLED_EXCEPTION from block 3 to block 4 [failed check for 1 to 65]
  EDGE(3) type FALL_THROUGH from block 3 to block 5 [successful check]
  EDGE(4) type UNHANDLED_EXCEPTION from block 3 to block 1 [failed check for 1]

BASIC BLOCK: 4
	CATCHES java.lang.Exception
  65: astore_3[78](1)
  66: aconst_null[1](1)
  67: areturn[176](1)
END
  EDGE(5) type RETURN from block 4 to block 1

BASIC BLOCK: 5
   1: invokevirtual[182](3) 4
   4: astore_3[78](1)
   5: aload_2[44](1)
END
  EDGE(6) type FALL_THROUGH from block 5 to block 6 [bytecode 5 => 6]

BASIC BLOCK: 6 [EXCEPTION THROWER]
  Exception thrower:    6: getfield[180](3) 5
END
  EDGE(7) type HANDLED_EXCEPTION from block 6 to block 4 [failed check for 6 to 65]
  EDGE(8) type FALL_THROUGH from block 6 to block 7 [successful check]
  EDGE(9) type UNHANDLED_EXCEPTION from block 6 to block 1 [failed check for 6]

BASIC BLOCK: 7
   6: getfield[180](3) 5
   9: aload_3[45](1)
END
  EDGE(10) type FALL_THROUGH from block 7 to block 8 [bytecode 9 => 10]

BASIC BLOCK: 8 [EXCEPTION THROWER]
  Exception thrower:   10: invokevirtual[182](3) 6
END
  EDGE(11) type HANDLED_EXCEPTION from block 8 to block 4 [failed check for 10 to 65]
  EDGE(12) type FALL_THROUGH from block 8 to block 9 [successful check]
  EDGE(13) type UNHANDLED_EXCEPTION from block 8 to block 1 [failed check for 10]

BASIC BLOCK: 9
  10: invokevirtual[182](3) 6
END
  EDGE(14) type FALL_THROUGH from block 9 to block 10 [bytecode 10 => 13]

BASIC BLOCK: 10 [EXCEPTION THROWER]
  Exception thrower:   13: invokevirtual[182](3) 7
END
  EDGE(15) type HANDLED_EXCEPTION from block 10 to block 4 [failed check for 13 to 65]
  EDGE(16) type FALL_THROUGH from block 10 to block 11 [successful check]
  EDGE(17) type UNHANDLED_EXCEPTION from block 10 to block 1 [failed check for 13]

BASIC BLOCK: 11
  13: invokevirtual[182](3) 7
END
  EDGE(18) type FALL_THROUGH from block 11 to block 12 [bytecode 13 => 16]

BASIC BLOCK: 12 [EXCEPTION THROWER]
  Exception thrower:   16: invokevirtual[182](3) 8
END
  EDGE(19) type HANDLED_EXCEPTION from block 12 to block 4 [failed check for 16 to 65]
  EDGE(20) type FALL_THROUGH from block 12 to block 13 [successful check]
  EDGE(21) type UNHANDLED_EXCEPTION from block 12 to block 1 [failed check for 16]

BASIC BLOCK: 13
  16: invokevirtual[182](3) 8
  19: ifne[154](3) -> 32
END
  EDGE(22) type IFCMP from block 13 to block 14 [bytecode 19 -> 32]
  EDGE(23) type FALL_THROUGH from block 13 to block 15 [bytecode 19 -> 22]

BASIC BLOCK: 14
  32: aload_3[45](1)
  33: aload_0[42](1)
  34: getfield[180](3) 12
END
  EDGE(24) type FALL_THROUGH from block 14 to block 16 [bytecode 34 => 37]

BASIC BLOCK: 15
  22: getstatic[178](3) 9
END
  EDGE(25) type FALL_THROUGH from block 15 to block 17 [bytecode 22 => 25]

BASIC BLOCK: 16 [EXCEPTION THROWER]
  Exception thrower:   37: invokevirtual[182](3) 13
END
  EDGE(26) type HANDLED_EXCEPTION from block 16 to block 4 [failed check for 37 to 65]
  EDGE(27) type FALL_THROUGH from block 16 to block 18 [successful check]
  EDGE(28) type UNHANDLED_EXCEPTION from block 16 to block 1 [failed check for 37]

BASIC BLOCK: 17 [EXCEPTION THROWER]
  Exception thrower:   25: invokestatic[184](3) 10
END
  EDGE(29) type HANDLED_EXCEPTION from block 17 to block 4 [failed check for 25 to 65]
  EDGE(30) type FALL_THROUGH from block 17 to block 19 [successful check]
  EDGE(31) type UNHANDLED_EXCEPTION from block 17 to block 1 [failed check for 25]

BASIC BLOCK: 18
  37: invokevirtual[182](3) 13
  40: ifne[154](3) -> 58
END
  EDGE(32) type IFCMP from block 18 to block 20 [bytecode 40 => 58]
  EDGE(33) type FALL_THROUGH from block 18 to block 21 [bytecode 40 -> 43]

BASIC BLOCK: 19
  25: invokestatic[184](3) 10
END
  EDGE(34) type FALL_THROUGH from block 19 to block 22 [bytecode 25 => 28]

BASIC BLOCK: 20 [EXCEPTION THROWER]
  Exception thrower:   58: invokestatic[184](3) 16
END
  EDGE(35) type HANDLED_EXCEPTION from block 20 to block 4 [failed check for 58 to 65]
  EDGE(36) type FALL_THROUGH from block 20 to block 23 [successful check]
  EDGE(37) type UNHANDLED_EXCEPTION from block 20 to block 1 [failed check for 58]

BASIC BLOCK: 21
  43: getstatic[178](3) 9
END
  EDGE(38) type FALL_THROUGH from block 21 to block 24 [bytecode 43 => 46]

BASIC BLOCK: 22 [EXCEPTION THROWER]
  Exception thrower:   28: invokevirtual[182](3) 11
END
  EDGE(39) type HANDLED_EXCEPTION from block 22 to block 4 [failed check for 28 to 65]
  EDGE(40) type FALL_THROUGH from block 22 to block 25 [successful check]
  EDGE(41) type UNHANDLED_EXCEPTION from block 22 to block 1 [failed check for 28]

BASIC BLOCK: 23
  58: invokestatic[184](3) 16
END
  EDGE(42) type FALL_THROUGH from block 23 to block 26 [bytecode 58 => 61]

BASIC BLOCK: 24 [EXCEPTION THROWER]
  Exception thrower:   46: invokestatic[184](3) 10
END
  EDGE(43) type HANDLED_EXCEPTION from block 24 to block 4 [failed check for 46 to 65]
  EDGE(44) type FALL_THROUGH from block 24 to block 27 [successful check]
  EDGE(45) type UNHANDLED_EXCEPTION from block 24 to block 1 [failed check for 46]

BASIC BLOCK: 25
  28: invokevirtual[182](3) 11
  31: areturn[176](1)
END
  EDGE(46) type RETURN from block 25 to block 1

BASIC BLOCK: 26 [EXCEPTION THROWER]
  Exception thrower:   61: invokevirtual[182](3) 11
END
  EDGE(47) type HANDLED_EXCEPTION from block 26 to block 4 [failed check for 61 to 65]
  EDGE(48) type FALL_THROUGH from block 26 to block 28 [successful check]
  EDGE(49) type UNHANDLED_EXCEPTION from block 26 to block 1 [failed check for 61]

BASIC BLOCK: 27
  46: invokestatic[184](3) 10
  49: ldc[18](2) 14
END
  EDGE(50) type FALL_THROUGH from block 27 to block 29 [bytecode 49 => 51]

BASIC BLOCK: 28
  61: invokevirtual[182](3) 11
  64: areturn[176](1)
END
  EDGE(51) type RETURN from block 28 to block 1

BASIC BLOCK: 29 [EXCEPTION THROWER]
  Exception thrower:   51: invokevirtual[182](3) 15
END
  EDGE(52) type HANDLED_EXCEPTION from block 29 to block 4 [failed check for 51 to 65]
  EDGE(53) type FALL_THROUGH from block 29 to block 30 [successful check]
  EDGE(54) type UNHANDLED_EXCEPTION from block 29 to block 1 [failed check for 51]

BASIC BLOCK: 30
  51: invokevirtual[182](3) 15
END
  EDGE(55) type FALL_THROUGH from block 30 to block 31 [bytecode 51 => 54]

BASIC BLOCK: 31 [EXCEPTION THROWER]
  Exception thrower:   54: invokevirtual[182](3) 11
END
  EDGE(56) type HANDLED_EXCEPTION from block 31 to block 4 [failed check for 54 to 65]
  EDGE(57) type FALL_THROUGH from block 31 to block 32 [successful check]
  EDGE(58) type UNHANDLED_EXCEPTION from block 31 to block 1 [failed check for 54]

BASIC BLOCK: 32
  54: invokevirtual[182](3) 11
  57: areturn[176](1)
END
  EDGE(59) type RETURN from block 32 to block 1


